options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: untitled
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: distance
  id: variable
  parameters:
    comment: ''
    value: '5'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 88.0]
    rotation: 0
    state: enabled
- name: frequency
  id: variable
  parameters:
    comment: ''
    value: 868e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [232, 24.0]
    rotation: 0
    state: enabled
- name: indoor
  id: variable
  parameters:
    comment: ''
    value: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 88.0]
    rotation: 0
    state: enabled
- name: ip
  id: variable
  parameters:
    comment: ''
    value: '"0.0.0.0"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 152.0]
    rotation: 0
    state: enabled
- name: other
  id: variable
  parameters:
    comment: ''
    value: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 152.0]
    rotation: 0
    state: enabled
- name: port
  id: variable
  parameters:
    comment: ''
    value: '12345'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 152.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 1e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [152, 24.0]
    rotation: 0
    state: enabled
- name: save_directory
  id: variable
  parameters:
    comment: ''
    value: '"Capture"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [152, 88.0]
    rotation: 0
    state: enabled
- name: scenario
  id: variable
  parameters:
    comment: ''
    value: '"dev15timcons"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 152.0]
    rotation: 0
    state: enabled
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/aqeel/receiverSide/Capture/fileSync/file
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [352, 192.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nfrom sigmf import\
      \ SigMFFile\nfrom sigmf.utils import get_data_type_str, get_sigmf_iso8601_datetime_now\n\
      import time\nimport socket\nimport os\n\nclass SyncFileSaver(gr.sync_block):\n\
      \    \"\"\"\n    docstring for block SyncFileSaver\n    \"\"\"\n    def __init__(self,\
      \ \n                sample_rate=64000,\n                 distance=5,\n     \
      \            indoor=True,\n                 save_directory=\"~/Music/testSave/\"\
      ,\n                 scenario_name=\"poc\",\n                 port=12345,\n \
      \                ip_address=\"127.0.0.1\",\n                 other_info=\"\"\
      ,\n                 ):\n        gr.sync_block.__init__(self,\n            name=\"\
      Syncronised File Saver\",\n            in_sig=[np.complex64],\n            out_sig=None)\n\
      \n        # first, establish the TCP connection with the transmitter\n\n   \
      \     self.connected = False\n        self.port = port\n        self.ip_address\
      \ = ip_address\n\n\n        # set the current cycle at 0\n        self.current_cycle\
      \ = 0\n\n        # root directory to save the scenario directory to \n     \
      \   self.save_directory = save_directory\n        # name of directory to save\
      \ the devices directories (where all the capture files belong)\n        self.scenario_name\
      \ = scenario_name\n\n        # scenario context \n        self.sample_rate =\
      \ sample_rate\n        self.description = f\"capture at {distance}m {\"indoor\"\
      \ if indoor else \"outdoor\"}. {other_info}\"\n        self.first = True   \
      \     \n        self.firstt = True\n\n\n    def work(self, input_items, output_items):\n\
      \        data = input_items[0]\n\n        if self.connected == False:\n\n  \
      \          print(f\"Waiting for transmitter to connect to PORT:{self.port}\"\
      )\n            # by IP with TCP \n            sock = socket.socket(socket.AF_INET,\
      \ socket.SOCK_STREAM)\n            sock.bind((self.ip_address, self.port))\n\
      \n            sock.listen(5)\n            self.conn, addr = sock.accept()\n\
      \            print(f\"Connection established with transmitter at {time.time()}\"\
      )\n            \n            # transmission parameters\n            self.frequency\
      \ = self.get_next_var_from_sock(self.conn) * 1e6\n            print(f\"frequency\
      \ received: {self.frequency}\")\n\n            self.sf = self.get_next_var_from_sock(self.conn)\n\
      \            print(f\"sf received: {self.sf}\")\n\n            self.bw = self.get_next_var_from_sock(self.conn)\
      \ * 1e3\n            print(f\"bw received: {self.bw}\")\n\n\n            # device\
      \ list to keep track of the origin of the signal\n            self.device_list\
      \ = self.get_next_var_from_sock(self.conn)\n            print(f\"device list\
      \ received: {self.device_list}\")\n           \n            # set the first\
      \ device to be listened to \n            self.current_device, self.current_index\
      \ = self.device_list[0], 0\n\n            # time synchronisation parameters\
      \ \n            self.start_time =  self.get_next_var_from_sock(self.conn)\n\
      \            print(f\"start_time received: {self.start_time} compared to current\
      \ {time.time()}\")\n\n            \n            self.period = self.get_next_var_from_sock(self.conn)\
      \  # should be given in s\n            print(f\"period received: {self.period}\"\
      )\n\n            self.cycles = self.get_next_var_from_sock(self.conn)\n    \
      \        print(f\"cycles received: {self.cycles}\")\n            \n        \
      \    self.next = self.start_time + self.period\n            self.connected =\
      \ True\n            self.conn.close()\n            sock.close()\n          \
      \  print(f\"finished receiving at {time.time()}\")\n\n \n\n        # wait for\
      \ the start time\n        if time.time() < self.start_time:\n            self.consume(0,\
      \ len(input_items[0]))\n            return 0\n            \n        #if self.first:\n\
      \        #    # next time to save the file\n        #    self.next = time.time()\
      \ + self.period\n        #    print(f\"next received: {self.next} compared to\
      \ current {time.time()}\")\n        #    self.first = False\n        \n    \
      \    # stop if all captured\n        if self.current_cycle >= self.cycles:\n\
      \            return 0\n        \n        # wait for the period to save the file\n\
      \        finished = self.save_frame_during_period(input_items)\n\n        #\
      \ move the current index and device\n        if finished:\n            self.next_device()\n\
      \n        return 0\n\n    def save_frame_during_period(self, data):\n      \
      \  \"\"\" waiting until the next period \"\"\"\n        if self.firstt:\n  \
      \          print(f\"stqrted saving at {time.time()} \")\n            self.firstt\
      \ =False\n        \n        if time.time() < self.next:\n            self.save_frame(data)\n\
      \            return False\n\n        print(f\"stopped saving at {time.time()}\
      \ compared to {self.next} \\n drift : {time.time() - self.next}\")\n       \
      \ self.next += self.period\n\n        # create the metadata\n        meta =\
      \ SigMFFile(\n        data_file=f\"{self.save_directory}/{self.scenario_name}/device{self.current_device}/cycle_{self.current_cycle}.sigmf-data\"\
      , # extension is optional\n        global_info = {\n            SigMFFile.DATATYPE_KEY:\
      \ \"cf32_le\",  \n            SigMFFile.VERSION_KEY: \"0.0.1\",\n          \
      \  SigMFFile.FREQUENCY_KEY: self.frequency,\n            SigMFFile.SAMPLE_RATE_KEY:\
      \ self.sample_rate,\n            SigMFFile.DESCRIPTION_KEY: self.description,\n\
      \            \n            \n        })\n\n        meta.add_capture(self.current_cycle,\
      \ metadata={\n            SigMFFile.DATETIME_KEY: get_sigmf_iso8601_datetime_now(),\n\
      \        })\n\n        # save the meta file\n        meta.tofile(f\"{self.save_directory}/{self.scenario_name}/device{self.current_device}/cycle_{self.current_cycle}.sigmf-meta\"\
      ) # extension is optional\n\n        print(f\"{self.current_device} : [{self.current_cycle}/{self.cycles}]\
      \ end saved at {time.time()}\")\n        self.firstt = True\n        return\
      \ True\n\n\n\n    def save_frame(self, input_items):\n\n        data = input_items[0]\n\
      \        # create the data file and saves it\n        filename = f\"{self.save_directory}/{self.scenario_name}/device{self.current_device}/cycle_{self.current_cycle}.sigmf-data\"\
      \n        os.makedirs(os.path.dirname(filename), exist_ok=True)\n        with\
      \ open(filename, \"ab\") as f:\n            np.array(data).tofile(f)\n     \
      \   self.consume(0, len(data))\n\n\n    def next_device(self):\n\n        #\
      \ change device\n        print(f\"moved from {self.current_device} \", end=\"\
      \")\n        changeCycle = self.current_index+1 == len(self.device_list)\n \
      \       self.current_index = (self.current_index +1) % len(self.device_list)\n\
      \        self.current_device = self.device_list[self.current_index]\n\n    \
      \    print(f\"to {self.current_device}\")\n        # if the last device in the\
      \ list\n        if changeCycle:\n            self.current_cycle += 1\n     \
      \       print(f\"next cycle :{self.current_cycle}\")\n\n        print()\n  \
      \      if self.current_cycle == self.cycles:\n            print(\"all cycles\
      \ are done !\")\n\n    def get_next_var_from_sock(self, sock):\n\n        sep\
      \ = '\\n'\n        data = sock.recv(1).decode(\"utf-8\")\n        buf = data\n\
      \        # if deconnected\n        if data == '':\n            raise Exception(\"\
      tried to read a variable but empty socket buffer\")\n\n        # while not seen\
      \ the separator\n        while sep not in buf and data:\n            buf +=\
      \ sock.recv(1).decode(\"utf-8\")\n\n        if buf != '':\n            data\
      \ = eval(buf)\n            return data\n            \n            \n\n"
    affinity: ''
    alias: ''
    comment: ''
    distance: distance
    indoor: indoor
    ip_address: ip
    maxoutbuf: '0'
    minoutbuf: '0'
    other_info: other
    port: port
    sample_rate: samp_rate
    save_directory: save_directory
    scenario_name: scenario
  states:
    _io_cache: ('Syncronised File Saver', 'SyncFileSaver', [('sample_rate', '64000'),
      ('distance', '5'), ('indoor', 'True'), ('save_directory', "'~/Music/testSave/'"),
      ('scenario_name', "'poc'"), ('port', '12345'), ('ip_address', "'127.0.0.1'"),
      ('other_info', "''")], [('0', 'complex', 1)], [], '\ndocstring for block SyncFileSaver\n',
      ['ip_address', 'port', 'sample_rate', 'save_directory', 'scenario_name'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 268.0]
    rotation: 0
    state: enabled
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"RX2"'
    ant1: '"RX2"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: frequency
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '""'
    dev_args: ''
    gain0: '0'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: pc_clock
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 264.0]
    rotation: 0
    state: enabled

connections:
- [uhd_usrp_source_0, '0', epy_block_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.12.0
